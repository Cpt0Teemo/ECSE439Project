/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.wh.wH.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.wh.wH.Availability;
import org.xtext.example.wh.wH.Role;
import org.xtext.example.wh.wH.TaskAssignment;
import org.xtext.example.wh.wH.WHPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.wh.wH.impl.TaskAssignmentImpl#getRole <em>Role</em>}</li>
 *   <li>{@link org.xtext.example.wh.wH.impl.TaskAssignmentImpl#getAvailability <em>Availability</em>}</li>
 *   <li>{@link org.xtext.example.wh.wH.impl.TaskAssignmentImpl#isIsDone <em>Is Done</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskAssignmentImpl extends MinimalEObjectImpl.Container implements TaskAssignment
{
  /**
   * The cached value of the '{@link #getRole() <em>Role</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRole()
   * @generated
   * @ordered
   */
  protected Role role;

  /**
   * The cached value of the '{@link #getAvailability() <em>Availability</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAvailability()
   * @generated
   * @ordered
   */
  protected Availability availability;

  /**
   * The default value of the '{@link #isIsDone() <em>Is Done</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsDone()
   * @generated
   * @ordered
   */
  protected static final boolean IS_DONE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsDone() <em>Is Done</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsDone()
   * @generated
   * @ordered
   */
  protected boolean isDone = IS_DONE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskAssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WHPackage.Literals.TASK_ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Role getRole()
  {
    if (role != null && role.eIsProxy())
    {
      InternalEObject oldRole = (InternalEObject)role;
      role = (Role)eResolveProxy(oldRole);
      if (role != oldRole)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WHPackage.TASK_ASSIGNMENT__ROLE, oldRole, role));
      }
    }
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Role basicGetRole()
  {
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRole(Role newRole)
  {
    Role oldRole = role;
    role = newRole;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WHPackage.TASK_ASSIGNMENT__ROLE, oldRole, role));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Availability getAvailability()
  {
    if (availability != null && availability.eIsProxy())
    {
      InternalEObject oldAvailability = (InternalEObject)availability;
      availability = (Availability)eResolveProxy(oldAvailability);
      if (availability != oldAvailability)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WHPackage.TASK_ASSIGNMENT__AVAILABILITY, oldAvailability, availability));
      }
    }
    return availability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Availability basicGetAvailability()
  {
    return availability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAvailability(Availability newAvailability)
  {
    Availability oldAvailability = availability;
    availability = newAvailability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WHPackage.TASK_ASSIGNMENT__AVAILABILITY, oldAvailability, availability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsDone()
  {
    return isDone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsDone(boolean newIsDone)
  {
    boolean oldIsDone = isDone;
    isDone = newIsDone;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WHPackage.TASK_ASSIGNMENT__IS_DONE, oldIsDone, isDone));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WHPackage.TASK_ASSIGNMENT__ROLE:
        if (resolve) return getRole();
        return basicGetRole();
      case WHPackage.TASK_ASSIGNMENT__AVAILABILITY:
        if (resolve) return getAvailability();
        return basicGetAvailability();
      case WHPackage.TASK_ASSIGNMENT__IS_DONE:
        return isIsDone();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WHPackage.TASK_ASSIGNMENT__ROLE:
        setRole((Role)newValue);
        return;
      case WHPackage.TASK_ASSIGNMENT__AVAILABILITY:
        setAvailability((Availability)newValue);
        return;
      case WHPackage.TASK_ASSIGNMENT__IS_DONE:
        setIsDone((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WHPackage.TASK_ASSIGNMENT__ROLE:
        setRole((Role)null);
        return;
      case WHPackage.TASK_ASSIGNMENT__AVAILABILITY:
        setAvailability((Availability)null);
        return;
      case WHPackage.TASK_ASSIGNMENT__IS_DONE:
        setIsDone(IS_DONE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WHPackage.TASK_ASSIGNMENT__ROLE:
        return role != null;
      case WHPackage.TASK_ASSIGNMENT__AVAILABILITY:
        return availability != null;
      case WHPackage.TASK_ASSIGNMENT__IS_DONE:
        return isDone != IS_DONE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isDone: ");
    result.append(isDone);
    result.append(')');
    return result.toString();
  }

} //TaskAssignmentImpl
